<#
.SYNOPSIS
    Sends custom events to SignalFx
.DESCRIPTION
    Sends custom events to SignalFx. Use this API to send events that SignalFx itself doesn't
    detect, such as software deployments or hardware changes. You can then correlate these events
    with changes detected in your metrics.
.PARAMETER EventType
    EventType must be a non-empty ASCII string with a length less than or equal to 256 characters.
.PARAMETER Dimension
    A list of key-value pairs that specify dimension names and values to associate with the event.
    SignalFx assumes that each value of eventType you send is associated with a specific set of
    dimension names and values.
.PARAMETER Property
    A list of key-value pairs that specify properties of the specified event.
.PARAMETER Category
    A category that describes the custom event, in the form of one of the allowed enumerated types:

    USER_DEFINED: The default for custom events
    ALERT: Used by SignalFx to mark an event generated by a detector.
    AUDIT: Used by third-party integrations
    JOB: Event generated by a SignalFx or third-party background job
    COLLECTD: Generated by the SignalFx CollectD integration
    SERVICE_DISCOVERY: Generated by third-party integrations
    EXCEPTION: A software exception occurred
.PARAMETER ApiToken
    Authentication token
.EXAMPLE
    PS C:\> <example usage>
    Explanation of what the example does
.INPUTS
    String, Hashtable, Int64
.OUTPUTS
    Object
.NOTES
    The SignalFx API will return the string "OK" if the POST is successful.
#>
function Publish-SFxEvent {
    [CmdletBinding()]
    param (
        [ValidateLength(1,256)]
        [ValidateNotNullOrEmpty()]
        [Parameter(Position=0, Mandatory)]
        [string]
        $EventType,

        [Parameter(Position=1)]
        [hashtable]
        $Dimension,

        [Parameter(Position=2)]
        [hashtable]
        $Property,

        [ValidateSet("USER_DEFINED", "ALERT", "AUDIT", "JOB", "COLLECTED", "SERVICE_DISCOVERY", "EXCEPTION")]
        [Parameter(Position=5)]
        [string]
        $Category,

        [Parameter(Position=6)]
        [string]
        $ApiToken
    )

    process {
        $request = [SFxPostEvent]::new($EventType)

        if ($PSBoundParameters.ContainsKey('Dimension')) {
            Foreach ($key in $Dimension.Keys) {
                $request.AddDimension($key, $Dimension[$key]) | Out-Null
            }
        }

        if ($PSBoundParameters.ContainsKey('Property')) {
            Foreach ($key in $Property.Keys) {
                $request.AddProperty($key, $Property[$key]) | Out-Null
            }
        }

        if ($PSBoundParameters.ContainsKey('Category')) {
            $request.SetCategory($Category) | Out-Null
        }

        if ($PSBoundParameters.ContainsKey('ApiToken')) {
            $request.SetToken($ApiToken) | Out-Null
        }

        $request.Invoke()
    }
}